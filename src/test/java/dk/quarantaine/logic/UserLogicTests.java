package dk.quarantaine.logic;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;

import dk.quarantaine.api.application.helper.FomatHelper;
import dk.quarantaine.api.application.logic.UserLogic;


@ExtendWith(MockitoExtension.class)
public class UserLogicTests {
    
    @InjectMocks
    UserLogic userLogic;


    /**
     * Tests if the password does actually hash and checks it towards a Regex
     */
    @Test
    public void hashPassword_Hashes(){
        
        //SETUP
        String passwordPlain = "W8x$YPMZxBkb&Qsb4&V3";


        //ACT
        String actual = userLogic.hashPassword(passwordPlain);

        //^\$2a\$[0-9]{1,2}\$

        //VERIFY
        assertTrue(actual.matches("^\\$2a\\$[0-9]{1,2}\\$.{0,}$"));

    }

    /**
     * Verifies a previous given hash with known password
     */
    @Test
    public void verifyPassword_Verifies(){
        //SETUP
        
        String passwordPlain = "TUh4b&Qq@CwehWb3XLvc";
        String passwordHash = "$2a$12$Dn4bKKXtfARfcygNq8bUmeVpHSTKPBJA1cljmzUJzeix/sCXU0WQO";


        //ACT
        boolean actual = userLogic.verifyPassword(passwordPlain, passwordHash);

        //VERIFY
        assertEquals(true, actual);
    }

    /**
     * Checks that internal Logic can hash and verify password hashes generated by itself
     */
    @Test
    public void verifyPassword_HashedPasswordCanBeVerified(){
        //SETUP
        String passwordPlain = "CKtTa4MUf#v$YscqRB9$";

        //ACT
        String actual = userLogic.hashPassword(passwordPlain);
        
        //VERIFY
        assertTrue(userLogic.verifyPassword(passwordPlain, actual));
    }


    

}
