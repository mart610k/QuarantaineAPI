package dk.quarantaine.logic;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;

import dk.quarantaine.api.application.logic.UserLogic;


@ExtendWith(MockitoExtension.class)
public class UserLogicTests {
    
    @InjectMocks
    UserLogic userLogic;


    /**
     * Tests if the password does actually hash and checks it towards a Regex
     */
    @Test
    public void hashPassword_Hashes(){
        
        //SETUP
        String passwordPlain = "W8x$YPMZxBkb&Qsb4&V3";


        //ACT
        String actual = userLogic.hashPassword(passwordPlain);

        //^\$2a\$[0-9]{1,2}\$

        //VERIFY
        assertTrue(actual.matches("^\\$2a\\$[0-9]{1,2}\\$.{0,}$"));

    }

    /**
     * Verifies a previous given hash with known password
     */
    @Test
    public void verifyPassword_Verifies(){
        //SETUP
        
        String passwordPlain = "TUh4b&Qq@CwehWb3XLvc";
        String passwordHash = "$2a$12$Dn4bKKXtfARfcygNq8bUmeVpHSTKPBJA1cljmzUJzeix/sCXU0WQO";


        //ACT
        boolean actual = userLogic.verifyPassword(passwordPlain, passwordHash);

        //VERIFY
        assertEquals(true, actual);
    }

    /**
     * Checks that internal Logic can hash and verify password hashes generated by itself
     */
    @Test
    public void verifyPassword_HashedPasswordCanBeVerified(){
        //SETUP
        String passwordPlain = "CKtTa4MUf#v$YscqRB9$";

        //ACT
        String actual = userLogic.hashPassword(passwordPlain);
        
        //VERIFY
        assertTrue(userLogic.verifyPassword(passwordPlain, actual));
    }


    @ParameterizedTest
    @ValueSource(strings = {"","asdfwqet","r12sdawt","213452212","1242352","+4512324252","21 42 53 65","2e12ad35"})
    public void validatePhoneNumber_DosentValidate(String nonValidNumers){
        
        //ACT
        boolean actual = userLogic.validatePhoneNumber(nonValidNumers);

        //VERIFY
        assertFalse(actual);

    }

    @Test
    public void validatePhoneNumber_PhoneNumberNull(){
         //SETUP
         String nullLiteral = null;

         //ACT
         boolean actual = userLogic.validatePhoneNumber(nullLiteral);
 
         //VERIFY
         assertFalse(actual);
    }

    @Test
    public void validatePhoneNumber_ValidFormat(){
        //SETUP
        String validNumber = "52148634";

        //ACT
        boolean actual = userLogic.validatePhoneNumber(validNumber);

        //VERIFY
        assertTrue(actual);
    }


    @ParameterizedTest
    @ValueSource(strings= {"2%Y8NCpT%o7d$Ak%ZJm8","SJyLKP8UD@T4cETyBR5@","%9KuDTPs@#oNJUi@jUVq","Bwr5DG6%","jFt*39cj","cg$7Y$qG","G^Ro$v25"})
    public void validatePassword_ValidPassword(String validPasswords){
        //ACT
        boolean actual = userLogic.validatePassword(validPasswords);

        //VERIFY
        assertTrue(actual);
    }

    @ParameterizedTest
    @ValueSource(strings= {"3K@y","z&hrn28^b4r^8isrbuc%","BPDBYLD&VH2@LRKJ548C","sQioB&FXgpe$*FRvR*Sj","tvymWmqbcu6UHeJmy3PE","!&&^#79!59295%$33*^4","HxvLcGdGuCaENNUaGMZY","$^QW!JD!%GGFGD@SZTLG"})
    public void validatePassword_NotValid(String shortPasswords){
        //ACT
        boolean actual = userLogic.validatePassword(shortPasswords);

        //VERIFY
        assertFalse(actual);
    }

}
